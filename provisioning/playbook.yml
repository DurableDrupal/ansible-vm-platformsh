---
- hosts: all

  vars_files:
  - vars.yml

  handlers:
  - name: restart apache
    service: name=apache2 state=restarted
 
  tasks:
  - name: Get software for apt repository management.
    apt: "pkg={{ item }} state=installed update_cache=true"
    with_items:
      - python-apt
      - python-pycurl

## let's leave things at PHP 5.4 for Drupal 7 (and the replacement of APC for Optimizer+) till post Drupal 7
#  - name: Add ondrej repository for PHP 5.5.
#    apt_repository: repo='ppa:ondrej/php5'

  - name: "Install Apache, MySQL, PHP, and other dependencies."
    apt: "pkg={{ item }} state=installed update_cache=true"
    with_items:
      - git
      - curl
      - sendmail
      - apache2
      - php5
      - php5-common
      - php5-mysql
      - php5-cli
      - php5-curl
      - php5-gd
      - php5-dev
      - php5-mcrypt
      - php-apc
      - php-pear
      - python-mysqldb
      - mysql-server

  - name: Disable the firewall (since this is for local dev only).
    service: name=ufw state=stopped

  - name: "Start Apache, MySQL, and PHP."
    service: "name={{ item }} state=started enabled=yes"
    with_items:
      - apache2
      - mysql

  - name: Enable Apache rewrite module (required for Drupal).
    apache2_module: name=rewrite state=present
    notify: restart apache

  - name: Add Apache virtualhost for Drupal development.
    template:
      src: "templates/drupal.dev.conf.j2"
      dest: "/etc/apache2/sites-available/{{ domain }}.dev.conf"
      owner: root
      group: root
      mode: 0644
    notify: restart apache

  - name: Symlink Drupal virtualhost to sites-enabled.
    file:
      src: "/etc/apache2/sites-available/{{ domain }}.dev.conf"
      dest: "/etc/apache2/sites-enabled/{{ domain }}.dev.conf"
      state: link
    notify: restart apache

  - name: Remove default virtualhost file.
    file:
      path: "/etc/apache2/sites-enabled/000-default"
      state: absent
    notify: restart apache

  - name: Enable upload progress via APC.
    lineinfile:
      dest: "/etc/php5/apache2/conf.d/20-apcu.ini"
      regexp: "^apc.rfc1867"
      line: "apc.rfc1867 = 1"
      state: present
    notify: restart apache

  - name: Remove the MySQL test database.
    mysql_db: db=test state=absent

  - name: Create a database for Drupal.
    mysql_db: "db={{ domain }} state=present"

  - name: Install Composer into the current directory.
    shell: >
      curl -sS https://getcomposer.org/installer | php
      creates=/usr/local/bin/composer

  - name: Move Composer into globally-accessible location.
    shell: >
      mv composer.phar /usr/local/bin/composer
      creates=/usr/local/bin/composer

  - name: Check out drush master branch.
    git:
      repo: https://github.com/drush-ops/drush.git
      dest: /opt/drush

  - name: Install Drush dependencies with Composer.
    shell: >
      /usr/local/bin/composer install
      chdir=/opt/drush
      creates=/opt/drush/vendor/autoload.php

  - name: "Drush: Create drush bin symlink."
    file:
      src: /opt/drush/drush
      dest: /usr/local/bin/drush
      state: link
      
  - name: Install Platform.sh CLI with Composer.
    shell: >
      /usr/local/bin/composer global require 'platformsh/cli:1.*' 
    sudo: yes
    sudo_user: vagrant

  # we are in home dir now after composer CLI install
  - name: update PATH in ~/.bash_profile for platform command
    shell: >
      echo 'export PATH="$PATH:~/.composer/vendor/bin"' >> ./.bash_profile
    sudo: yes
    sudo_user: vagrant
    
## We don't actually install Drupal at drupal_core_path
## We just want to use the virtual host and database for our Platform.sh Project
## So we stop here

#  - name: Check out Drupal Core to the Apache docroot.
#    git:
#      repo: http://git.drupal.org/project/drupal.git
#      version: "{{ drupal_core_version }}"
#      dest: "{{ drupal_core_path }}"

#  - name: Check out DurableDrupalDistro to the Apache docroot.
#    git:
#      repo: https://github.com/DurableDrupal/durable-drupal-distro.git
##      version: "{{ drupal_core_version }}"
#      dest: "{{ drupal_core_path }}"

#  - name: Install Drupal.
#    command: >
#      drush si drupallean -y --site-name="{{ drupal_site_name }}" --account-name=admin
#      --account-pass=admin --db-url=mysql://root@localhost/{{ domain }}
#      chdir={{ drupal_core_path }}
#      creates={{ drupal_core_path }}/sites/default/settings.php
#    notify: restart apache

##  Only relevant to Drupal 8 in 2013
##  # SEE: https://drupal.org/node/2121849#comment-8413637
##  - name: Set permissions properly on settings.php.
##    file:
##      path: "{{ drupal_core_path }}/sites/default/settings.php"
##      mode: 0744

#  - name: Set permissions properly on files directory.
#    file:
#      path: "{{ drupal_core_path }}/sites/default/files"
#      mode: 0777
#      state: directory
#      recurse: yes
 
#  - name: Set vagrant user's recursive ownership of document root
#    file:
#      path: "{{ drupal_core_path }}"
#      owner: "vagrant"
#      recurse: yes
      
#  - name: Set directory permissions recursively on document root.
#    file:
#      path: "{{ drupal_core_path }}"
#      mode: 0755
#      state: directory
#      recurse: yes
      
#  - command:  find . -type f -exec chmod 664 {} \;
#    args:
#      chdir: "{{ drupal_core_path }}"
      
#  - name: Set http server user's recursive ownership of files directory
#    file:
#      path: "{{ drupal_core_path }}/sites/default/files"
#      owner: "www-data"
#      recurse: yes
      
